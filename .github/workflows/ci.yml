name: CI

on:
  push:
    branches: [main, unified-core-architecture]
  pull_request:
    branches: [main, unified-core-architecture]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      run_perf:
        description: "Run PERF-gated performance/benchmarks suite"
        type: boolean
        default: false
      run_e2e:
        description: "Run gated E2E suite"
        type: boolean
        default: false

# Cancel previous workflow runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUN_VERSION: "1.2.20"
  NODE_VERSION: "20"

jobs:
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for changeset detection

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            vscode-client/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: |
          bun install --frozen-lockfile
          cd vscode-client && npm ci

      - name: Type checking
        run: |
          echo "🔍 Type checking main project..."
          bun run build:tsc
          echo "🔍 Type checking VS Code extension..."
          cd vscode-client && npm run compile

      - name: Linting and formatting
        run: |
          echo "🧹 Running Biome linting..."
          bun run lint
          echo "🧹 Checking VS Code extension..."
          cd vscode-client && npm run lint

      - name: Unit Tests
        run: |
          echo "🧪 Running unit tests..."
          bun test tests/step*.test.ts tests/test-helpers.test.ts --timeout 120000

      - name: Core Integration Tests
        run: |
          echo "🧪 Running core integration tests..."
          bun test tests/unified-core.test.ts tests/integration.test.ts --timeout 120000

      - name: Advanced Integration Tests
        run: |
          echo "🧪 Running advanced integration tests..."
          bun test tests/adapters.test.ts tests/learning-system.test.ts --timeout 120000
        continue-on-error: true  # These tests are in improvement state (60%+ passing)

      - name: HTTP Smoke (metrics + learning-stats)
        run: |
          echo "🌐 Starting HTTP server for smoke tests..."
          (timeout 30s bun run src/servers/http.ts > http-smoke.log 2>&1 & echo $! > http-smoke.pid)
          for i in {1..30}; do curl -sf http://localhost:7000/health >/dev/null && echo "HTTP up" && break || sleep 1; done
          echo "📈 /metrics JSON"
          curl -sSf http://localhost:7000/metrics?format=json | jq '.l4 | keys' || (echo "No metrics" && true)
          echo "🧠 /api/v1/learning-stats"
          curl -sSf http://localhost:7000/api/v1/learning-stats | jq '.data.patterns' || true
          echo "🛑 Stopping HTTP server"
          kill $(cat http-smoke.pid) 2>/dev/null || true

      - name: Performance Tests (gated)
        if: ${{ inputs.run_perf == true || vars.RUN_PERF == '1' }}
        run: |
          echo "⚡ Running PERF-gated performance benchmarks in batches..."
          chmod +x bin/test-run-perf-and-analyze.sh
          PERF=1 TIMEOUT=180000 BUN_JOBS=1 bin/test-run-perf-and-analyze.sh

      - name: Upload PERF artifacts
        if: ${{ inputs.run_perf == true || vars.RUN_PERF == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: perf-results
          path: .test-results-perf/
          retention-days: 7

      - name: Consistency Tests
        run: |
          echo "🔄 Running cross-protocol consistency tests..."
          bun test tests/consistency.test.ts --timeout 180000

      - name: VS Code Extension Tests
        run: |
          echo "🧪 Running VS Code extension tests..."
          cd vscode-client && npm test

      - name: Test Coverage
        run: |
          echo "📊 Generating test coverage..."
          bun test --coverage tests/ --timeout 300000

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        if: github.event_name == 'push'
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Production Artifacts
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            vscode-client/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock', '**/package-lock.json') }}

      - name: Install dependencies
        run: |
          bun install --frozen-lockfile
          cd vscode-client && npm ci

      - name: Build production artifacts
        run: |
          echo "🔨 Building production artifacts..."
          bun build src/servers/lsp.ts --target=bun --outdir=dist/lsp --minify --sourcemap
          bun build src/servers/http.ts --target=bun --outdir=dist/api --minify --sourcemap
          bun build src/servers/mcp.ts --target=bun --outdir=dist/mcp --minify --sourcemap
          bun build src/servers/mcp-sse.ts --target=bun --outdir=dist/mcp-sse --minify --sourcemap
          bun build src/servers/cli.ts --target=bun --outdir=dist/cli --minify --sourcemap

      - name: Build VS Code extension
        run: |
          echo "🔨 Building VS Code extension..."
          cd vscode-client
          npm run compile
          npx @vscode/vsce package

      - name: Test production builds
        run: |
          echo "🧪 Testing production builds..."
          # Test that builds can be executed
          timeout 10s bun run dist/api/http.js --port 7003 &
          sleep 5
          curl -f http://localhost:7003/health || echo "Health check failed but continuing..."
          pkill -f "dist/api/http.js" || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-builds
          path: |
            dist/
            vscode-client/*.vsix
          retention-days: 30

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        if: github.event_name == 'push'
        with:
          name: bundle-analysis
          path: |
            dist/**/*.js.map
          retention-days: 7

  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ontology-lsp
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.ref == 'refs/heads/main'
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/ontology-lsp:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: github.ref == 'refs/heads/main'
        with:
          sarif_file: 'trivy-results.sarif'

  health-check:
    name: Integration Health Check
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-builds
          path: .

      - name: Start servers for integration testing
        run: |
          echo "🚀 Starting servers for integration test..."
          mkdir -p .ontology/pids .ontology/logs
          
          # Start HTTP API server
          timeout 30s bun run dist/api/http.js --port 7000 > .ontology/logs/http.log 2>&1 &
          echo $! > .ontology/pids/http.pid
          
          # Start MCP SSE server  
          timeout 30s bun run dist/mcp-sse/mcp-sse.js --port 7001 > .ontology/logs/mcp.log 2>&1 &
          echo $! > .ontology/pids/mcp.pid
          
          # Wait for servers to start
          sleep 10

      - name: Run health checks
        run: |
          echo "🩺 Running health checks..."
          
          # Check HTTP API
          curl -f http://localhost:7000/health --max-time 10 || exit 1
          echo "✅ HTTP API health check passed"
          
          # Check MCP SSE server
          curl -f http://localhost:7001/health --max-time 10 || exit 1
          echo "✅ MCP SSE health check passed"
          
          # Test basic functionality
          curl -f http://localhost:7000/stats --max-time 10 | jq . || exit 1
          echo "✅ API functionality test passed"

      - name: Cleanup
        if: always()
        run: |
          # Stop background processes
          [ -f .ontology/pids/http.pid ] && kill $(cat .ontology/pids/http.pid) 2>/dev/null || true
          [ -f .ontology/pids/mcp.pid ] && kill $(cat .ontology/pids/mcp.pid) 2>/dev/null || true
          # Clean up any remaining processes
          pkill -f "dist/" || true

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, build, docker, health-check]
    if: always() && github.event_name == 'push'

    steps:
      - name: Create job summary
        run: |
          echo "# 🚀 Ontology-LSP CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality & Testing | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker | ${{ needs.docker.result == 'success' && '✅ Passed' || needs.docker.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ needs.health-check.result == 'success' && '✅ Passed' || needs.health-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  e2e:
    name: Gated E2E Suite
    runs-on: ubuntu-latest
    needs: quality
    if: ${{ inputs.run_e2e == true || vars.RUN_E2E == '1' }}
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run E2E tests (gated)
        env:
          E2E: '1'
          USE_LOCAL_REPOS: 'true'
          E2E_SKIP_CLONE: 'true'
          E2E_MEMORY_LIMIT: '2048'
        run: |
          echo "🧪 Running E2E tests (gated)..."
          bun test tests/e2e/ --timeout 600000

      - name: Upload E2E results (if any)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            tests/e2e/results/**
          if-no-files-found: ignore
          retention-days: 7
