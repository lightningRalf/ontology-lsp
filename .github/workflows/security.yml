# Security and Dependency Management Workflow

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ================================
  # Dependency Scanning
  # ================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.20
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run Bun audit
        run: bun audit --json > audit-results.json
        continue-on-error: true
      
      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit
          path: audit-results.json
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # ================================
  # Code Scanning
  # ================================
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'typescript' ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: 1.2.20
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build project
        run: bun run build:tsc
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # ================================
  # Secret Scanning
  # ================================
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.63.2
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ================================
  # Container Security
  # ================================
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build test image
        run: |
          docker build -t ontology-lsp:scan-test .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ontology-lsp:scan-test
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run Syft SBOM generation
        uses: anchore/sbom-action@v0
        with:
          image: ontology-lsp:scan-test
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom
          path: sbom.spdx.json

  # ================================
  # Security Policy Validation
  # ================================
  policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest
      
      - name: Validate Kubernetes manifests
        run: |
          # Download security policies
          curl -L https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/release-3.14/library/pod-security-standards/baseline/disallow-privileged-containers/constraint.yaml > policy.yaml
          
          # Test against our manifests
          opa test k8s/ --bundle policy.yaml || echo "Policy check completed with warnings"
      
      - name: Dockerfile security check
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true
      
      - name: Upload Dockerfile scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif