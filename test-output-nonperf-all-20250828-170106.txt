bun test v1.2.20 (6ad208bc)

test/layer1-budget.test.ts:
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Layer 1 budget behavior > findDefinition returns under Layer 1 budget on typical query [352.85ms]

test/layer1-cancellation.test.ts:
(pass) AsyncEnhancedGrep cancellable operations > searchCancellable can be cancelled quickly [137.07ms]
(pass) AsyncEnhancedGrep cancellable operations > listFilesCancellable can be cancelled quickly [70.10ms]

test/error-handling.test.ts:
[INFO] Performance: test_operation completed in 0ms {
  operation: "test_operation",
  duration: 0,
  success: true,
  attempt: 1,
  component: "TestComponent",
}
(pass) Error Handler > should handle successful operations [2.28ms]
[ERROR] MCP-Server: retry_test failed {
  name: "Error",
  message: "Transient failure",
  stack: "Error: Transient failure\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:55:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:52:7)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:50:39)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:42:46)",
}
[INFO] MCP-Server: Retry attempt 2/4 for retry_test {
  context: {
    component: "TestComponent",
    operation: "retry_test",
    timestamp: 1756400468287,
  },
  attempt: 2,
}
[ERROR] MCP-Server: retry_test failed {
  name: "Error",
  message: "Transient failure",
  stack: "Error: Transient failure\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:55:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:52:7)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at processTicksAndRejections (native:7:39)",
}
[INFO] MCP-Server: Retry attempt 3/4 for retry_test {
  context: {
    component: "TestComponent",
    operation: "retry_test",
    timestamp: 1756400468287,
  },
  attempt: 3,
}
[INFO] Performance: retry_test completed in 0ms {
  operation: "retry_test",
  duration: 0,
  success: true,
  attempt: 3,
  component: "TestComponent",
}
(pass) Error Handler > should retry on transient failures [73.72ms]
[ERROR] MCP-Server: validation_test failed {
  name: "Error",
  message: "Missing required field: name",
  stack: "Error: Missing required field: name\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:80:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:78:21)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:76:26)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:66:49)",
}
[WARN] MCP-Server: Not retrying due to error type {
  error: "Missing required field: name",
  type: "Error",
}
[ERROR] MCP-Server: validation_test failed {
  name: "Error",
  message: "Missing required field: name",
  stack: "Error: Missing required field: name\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:80:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:78:21)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:76:26)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:66:49)",
}
(pass) Error Handler > should not retry on validation errors [1.08ms]
[ERROR] MCP-Server: backoff_test failed {
  name: "Error",
  message: "Always fail",
  stack: "Error: Always fail\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:108:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:107:21)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:105:26)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:90:48)",
}
[INFO] MCP-Server: Retry attempt 2/4 for backoff_test {
  context: {
    component: "TestComponent",
    operation: "backoff_test",
    timestamp: 1756400468393,
  },
  attempt: 2,
}
[ERROR] MCP-Server: backoff_test failed {
  name: "Error",
  message: "Always fail",
  stack: "Error: Always fail\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:108:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:107:21)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at processTicksAndRejections (native:7:39)",
}
[INFO] MCP-Server: Retry attempt 3/4 for backoff_test {
  context: {
    component: "TestComponent",
    operation: "backoff_test",
    timestamp: 1756400468393,
  },
  attempt: 3,
}
[ERROR] MCP-Server: backoff_test failed {
  name: "Error",
  message: "Always fail",
  stack: "Error: Always fail\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:108:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:107:21)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at processTicksAndRejections (native:7:39)",
}
[INFO] MCP-Server: Retry attempt 4/4 for backoff_test {
  context: {
    component: "TestComponent",
    operation: "backoff_test",
    timestamp: 1756400468393,
  },
  attempt: 4,
}
[ERROR] MCP-Server: backoff_test failed {
  name: "Error",
  message: "Always fail",
  stack: "Error: Always fail\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:108:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:107:21)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at processTicksAndRejections (native:7:39)",
}
[ERROR] MCP-Server: backoff_test failed {
  name: "Error",
  message: "Always fail",
  stack: "Error: Always fail\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:108:21)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:107:21)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at processTicksAndRejections (native:7:39)",
}
(pass) Error Handler > should implement exponential backoff [1.72ms]
[ERROR] MCP-Server: circuit_test failed {
  name: "Error",
  message: "Service failure",
  stack: "Error: Service failure\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:35)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:23)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:151:37)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:136:44)",
}
[ERROR] MCP-Server: circuit_test failed {
  name: "Error",
  message: "Service failure",
  stack: "Error: Service failure\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:35)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:23)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:151:37)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:136:44)",
}
[ERROR] MCP-Server: circuit_test failed {
  name: "Error",
  message: "Service failure",
  stack: "Error: Service failure\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:35)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:23)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:151:37)\n    at processTicksAndRejections (native:7:39)",
}
[WARN] MCP-Server: Circuit breaker opened for TestComponent:circuit_test {
  failures: 2,
  threshold: 2,
}
[ERROR] MCP-Server: circuit_test failed {
  name: "Error",
  message: "Service failure",
  stack: "Error: Service failure\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:35)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:153:23)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:151:37)\n    at processTicksAndRejections (native:7:39)",
}
[ERROR] MCP-Server: circuit_test failed {
  name: "Error",
  message: "Circuit breaker open for TestComponent:circuit_test",
  stack: "Error: Circuit breaker open for TestComponent:circuit_test\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:66:31)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:151:37)\n    at processTicksAndRejections (native:7:39)",
}
[ERROR] MCP-Server: circuit_test failed {
  name: "Error",
  message: "Circuit breaker open for TestComponent:circuit_test",
  stack: "Error: Circuit breaker open for TestComponent:circuit_test\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:66:31)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:162:35)\n    at processTicksAndRejections (native:7:39)",
}
(pass) Error Handler > should implement circuit breaker [1.36ms]
[ERROR] MCP-Server: validation failed {
  name: "Error",
  message: "Missing required field: required_field",
  stack: "Error: Missing required field: required_field\n    at validateRequest (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:187:31)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:180:20)\n    at toThrow (unknown)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:185:8)",
}
[ERROR] MCP-Server: validation failed {
  name: "Error",
  message: "Request must be an object",
  stack: "Error: Request must be an object\n    at validateRequest (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:182:27)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:189:20)\n    at toThrow (unknown)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:194:8)",
}
(pass) Error Handler > should validate request parameters [16.83ms]
(pass) Error Handler > should create proper MCP errors [0.18ms]
(pass) File Logger > should create log entries with proper format [0.26ms]
(pass) File Logger > should log errors with stack traces [0.22ms]
(pass) File Logger > should create child loggers [0.10ms]
[INFO] Connection: Connection connect {
  connectionCount: 1,
  metadata: undefined,
}
[INFO] Performance: connect completed in 113ms {
  operation: "connect",
  duration: 113,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
[INFO] Connection: Connection disconnect {
  totalUptime: 0,
  graceful: true,
}
[INFO] Performance: disconnect completed in 1ms {
  operation: "disconnect",
  duration: 1,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
(pass) Connection Manager > should track connection state [113.48ms]
[INFO] Connection: Connection connect {
  connectionCount: 1,
  metadata: undefined,
}
[INFO] Performance: connect completed in 129ms {
  operation: "connect",
  duration: 129,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
(pass) Connection Manager > should track connection metrics [129.47ms]
[INFO] Connection: Connection disconnect {
  totalUptime: 0,
  graceful: true,
}
[INFO] Performance: disconnect completed in 0ms {
  operation: "disconnect",
  duration: 0,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
[INFO] Connection: Connection connect {
  connectionCount: 1,
  metadata: undefined,
}
[INFO] Performance: connect completed in 119ms {
  operation: "connect",
  duration: 119,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
[INFO] Connection: Connection disconnect {
  totalUptime: 0,
  graceful: true,
}
[INFO] Performance: disconnect completed in 0ms {
  operation: "disconnect",
  duration: 0,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
(pass) Connection Manager > should handle connection events [119.52ms]
(pass) Connection Manager > should provide health check information [0.31ms]
[INFO] Performance: test_operation completed in 0ms {
  operation: "test_operation",
  duration: 0,
  success: true,
  attempt: 1,
  component: "TestComponent",
}
(pass) Utility Functions > withMcpErrorHandling should wrap operations [0.33ms]
(pass) Utility Functions > createValidationError should create proper error [0.08ms]
(pass) Utility Functions > createInternalError should create proper error [0.10ms]
[ERROR] MCP-Server: recovery_scenario failed {
  name: "Error",
  message: "Network timeout",
  stack: "Error: Network timeout\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:402:25)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:409:7)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:407:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:393:58)",
}
LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

LS analysis failed for directory: src warn: Operation timed out after 200ms
      at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/layers/claude-tools.ts:1463:24)

[INFO] MCP-Server: Retry attempt 2/4 for recovery_scenario {
  context: {
    component: "IntegrationTest",
    operation: "recovery_scenario",
    timestamp: 1756400468863,
  },
  attempt: 2,
}
[ERROR] MCP-Server: recovery_scenario failed {
  name: "Error",
  message: "Temporary failure",
  stack: "Error: Temporary failure\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:403:25)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:409:7)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at processTicksAndRejections (native:7:39)",
}
[INFO] MCP-Server: Retry attempt 3/4 for recovery_scenario {
  context: {
    component: "IntegrationTest",
    operation: "recovery_scenario",
    timestamp: 1756400468863,
  },
  attempt: 3,
}
[INFO] Performance: recovery_scenario completed in 0ms {
  operation: "recovery_scenario",
  duration: 0,
  success: true,
  attempt: 3,
  component: "IntegrationTest",
}
(pass) Integration Tests > should handle complete error recovery scenario [4527.27ms]
[INFO] Performance: timeout_test completed in 107ms {
  operation: "timeout_test",
  duration: 107,
  success: true,
  attempt: 1,
  component: "IntegrationTest",
}
(pass) Integration Tests > should handle timeout scenarios [107.21ms]
[INFO] Connection: Connection connect {
  connectionCount: 1,
  metadata: undefined,
}
[INFO] Performance: connect completed in 102ms {
  operation: "connect",
  duration: 102,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
[ERROR] MCP-Server: Connection lost {
  name: "Error",
  message: "Connection lost",
  stack: "Error: Connection lost\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/test/error-handling.test.ts:453:33)\n    at processTicksAndRejections (native:7:39)",
}
[INFO] MCP-Server: Attempting reconnection in 100ms {
  attempt: 1,
  maxAttempts: 2,
}
[INFO] Connection: Connection disconnect {
  totalUptime: 1,
  graceful: true,
}
[INFO] Performance: disconnect completed in 0ms {
  operation: "disconnect",
  duration: 0,
  success: true,
  attempt: 1,
  component: "ConnectionManager",
}
(pass) Integration Tests > should handle connection loss and recovery [103.27ms]

tests/step3_ontology-engine.test.ts:
Added concept: Alpha (1)
(pass) Step 3: OntologyEngine > finds concept by representation [4.85ms]
Renamed concept: Alpha -> Beta
Evolved concept: Beta - rename
(pass) Step 3: OntologyEngine > renames concept through evolution [1.71ms]
Added concept: Gamma (2)
Added relation: Beta uses Gamma
(pass) Step 3: OntologyEngine > adds relations and retrieves related concepts [7.84ms]

tests/file-uri-resolution.test.ts:
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
[INFO] Performance: tool_find_definition completed in 43ms {
  operation: "tool_find_definition",
  duration: 43,
  success: true,
  resultSize: 527,
}
[INFO] Performance: tool_find_definition completed in 43ms {
  operation: "tool_find_definition",
  duration: 43,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) File URI Resolution - Red Tests > MCP Adapter File Discovery > should discover actual file location when no file context provided [97.47ms]
[INFO] Performance: tool_find_definition completed in 3142ms {
  operation: "tool_find_definition",
  duration: 3142,
  success: true,
  resultSize: 268,
}
[INFO] Performance: tool_find_definition completed in 3143ms {
  operation: "tool_find_definition",
  duration: 3143,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) File URI Resolution - Red Tests > MCP Adapter File Discovery > should handle symbol not found gracefully [3143.51ms]
[INFO] Performance: tool_find_definition completed in 58ms {
  operation: "tool_find_definition",
  duration: 58,
  success: true,
  resultSize: 1108,
}
[INFO] Performance: tool_find_definition completed in 58ms {
  operation: "tool_find_definition",
  duration: 58,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) File URI Resolution - Red Tests > MCP Adapter File Discovery > should use provided file context when available [58.30ms]
(pass) File URI Resolution - Red Tests > Core Analyzer URI Validation > should reject file://unknown URIs [80.35ms]
(pass) File URI Resolution - Red Tests > Core Analyzer URI Validation > should validate URI format [48.80ms]
(pass) File URI Resolution - Red Tests > Symbol Locator Integration > should locate symbols across workspace [86.83ms]
(pass) File URI Resolution - Red Tests > Symbol Locator Integration > should cache symbol locations for performance [13.89ms]
[INFO] Performance: tool_find_definition completed in 3107ms {
  operation: "tool_find_definition",
  duration: 3107,
  success: true,
  resultSize: 268,
}
[INFO] Performance: tool_find_definition completed in 3107ms {
  operation: "tool_find_definition",
  duration: 3107,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) File URI Resolution - Red Tests > Error Handling > should distinguish between "not found" and "location unknown" [3107.76ms]
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Parameter 'symbol' cannot be empty",
  stack: "Error: Parameter 'symbol' cannot be empty\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:783:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
[WARN] MCP-Server: Not retrying due to error type {
  error: "Parameter 'symbol' cannot be empty",
  type: "McpError",
}
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Parameter 'symbol' cannot be empty",
  stack: "Error: Parameter 'symbol' cannot be empty\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:783:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
(pass) File URI Resolution - Red Tests > Error Handling > should provide helpful error messages [1.13ms]

tests/adapters.test.ts:
Layer layer1 already registered, skipping...
Layer layer2 already registered, skipping...
Layer layer3 already registered, skipping...
Layer layer4 already registered, skipping...
Layer layer5 already registered, skipping...
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Protocol Adapters Integration > LSP Adapter > should convert LSP definition requests correctly [71.46ms]
(pass) Protocol Adapters Integration > LSP Adapter > should convert LSP references requests correctly [51.72ms]
Created new pattern candidate: symbol_at_10_5 -> RenamedFunction
(pass) Protocol Adapters Integration > LSP Adapter > should handle LSP rename requests correctly [35.04ms]
(pass) Protocol Adapters Integration > LSP Adapter > should provide LSP completions correctly [33.91ms]
(pass) Protocol Adapters Integration > LSP Adapter > should maintain LSP protocol compliance [0.28ms]
[INFO] Performance: tool_find_definition completed in 60ms {
  operation: "tool_find_definition",
  duration: 60,
  success: true,
  resultSize: 610,
}
[INFO] Performance: tool_find_definition completed in 61ms {
  operation: "tool_find_definition",
  duration: 61,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) Protocol Adapters Integration > MCP Adapter > should handle find_definition tool correctly [60.95ms]
[INFO] Performance: tool_find_definition completed in 1ms {
  operation: "tool_find_definition",
  duration: 1,
  success: true,
  resultSize: 608,
}
[INFO] Performance: tool_find_definition completed in 1ms {
  operation: "tool_find_definition",
  duration: 1,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) Protocol Adapters Integration > MCP Adapter > should handle find_definition tool with advanced options [1.07ms]
[INFO] Performance: tool_find_references completed in 77ms {
  operation: "tool_find_references",
  duration: 77,
  success: true,
  resultSize: 9506,
}
[INFO] Performance: tool_find_references completed in 77ms {
  operation: "tool_find_references",
  duration: 77,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) Protocol Adapters Integration > MCP Adapter > should handle find_references tool correctly [106.38ms]
Created new pattern candidate: TestFunction -> RenamedFunction
[INFO] Performance: tool_rename_symbol completed in 11ms {
  operation: "tool_rename_symbol",
  duration: 11,
  success: true,
  resultSize: 386,
}
[INFO] Performance: tool_rename_symbol completed in 11ms {
  operation: "tool_rename_symbol",
  duration: 11,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) Protocol Adapters Integration > MCP Adapter > should handle rename_symbol tool correctly [11.11ms]
[INFO] Performance: tool_generate_tests completed in 1ms {
  operation: "tool_generate_tests",
  duration: 1,
  success: true,
  resultSize: 329,
}
[INFO] Performance: tool_generate_tests completed in 7ms {
  operation: "tool_generate_tests",
  duration: 7,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) Protocol Adapters Integration > MCP Adapter > should handle generate_tests tool correctly [7.22ms]
(pass) Protocol Adapters Integration > MCP Adapter > should provide correct MCP tool list [0.41ms]
[INFO] Performance: tool_non_existent_tool completed in 0ms {
  operation: "tool_non_existent_tool",
  duration: 0,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
(pass) Protocol Adapters Integration > MCP Adapter > should handle invalid MCP tool requests gracefully [0.42ms]
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
(pass) Protocol Adapters Integration > HTTP Adapter > should handle POST /api/definition requests correctly [0.92ms]
[DEBUG] API path: /api/v1/references Endpoint: /references Method: POST
(pass) Protocol Adapters Integration > HTTP Adapter > should handle GET /api/references requests correctly [87.89ms]
[DEBUG] API path: /api/v1/rename Endpoint: /rename Method: POST
(pass) Protocol Adapters Integration > HTTP Adapter > should handle POST /api/rename requests correctly [20.92ms]
[DEBUG] API path: /api/v1/completions Endpoint: /completions Method: POST
(pass) Protocol Adapters Integration > HTTP Adapter > should handle GET /api/completions requests correctly [32.99ms]
(pass) Protocol Adapters Integration > HTTP Adapter > should provide health check endpoint [0.42ms]
(pass) Protocol Adapters Integration > HTTP Adapter > should handle CORS requests correctly [21.57ms]
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
(pass) Protocol Adapters Integration > HTTP Adapter > should handle HTTP errors gracefully [0.78ms]
(pass) Protocol Adapters Integration > CLI Adapter > should handle 'find' command correctly [0.54ms]
(pass) Protocol Adapters Integration > CLI Adapter > should handle 'references' command correctly [0.45ms]
Created new pattern candidate: TestFunction -> NewName
(pass) Protocol Adapters Integration > CLI Adapter > should handle 'rename' command correctly [2.42ms]
(pass) Protocol Adapters Integration > CLI Adapter > should handle 'stats' command correctly [13.02ms]
(pass) Protocol Adapters Integration > CLI Adapter > should handle invalid input gracefully [0.57ms]
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  resultSize: 608,
}
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
(pass) Protocol Adapters Integration > Cross-Adapter Consistency > should return equivalent results across all adapters for definition [1.31ms]
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Parameter 'symbol' cannot be empty",
  stack: "Error: Parameter 'symbol' cannot be empty\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:783:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
[WARN] MCP-Server: Not retrying due to error type {
  error: "Parameter 'symbol' cannot be empty",
  type: "McpError",
}
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Parameter 'symbol' cannot be empty",
  stack: "Error: Parameter 'symbol' cannot be empty\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:783:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
(pass) Protocol Adapters Integration > Cross-Adapter Consistency > should handle errors consistently across adapters [57.28ms]
(pass) Protocol Adapters Integration > Backward Compatibility > should maintain compatibility with existing LSP clients [0.50ms]
(pass) Protocol Adapters Integration > Backward Compatibility > should maintain compatibility with existing MCP tools [0.15ms]
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
[DEBUG] API path: /api/v1/references Endpoint: /references Method: POST
[DEBUG] API path: /api/v1/completions Endpoint: /completions Method: POST
(pass) Protocol Adapters Integration > Backward Compatibility > should maintain compatibility with existing HTTP API clients [0.77ms]
(pass) Protocol Adapters Integration > Backward Compatibility > should maintain compatibility with existing CLI usage [0.56ms]
LSP Definition: 0ms
[INFO] Performance: tool_find_definition completed in 1ms {
  operation: "tool_find_definition",
  duration: 1,
  success: true,
  resultSize: 608,
}
[INFO] Performance: tool_find_definition completed in 1ms {
  operation: "tool_find_definition",
  duration: 1,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
MCP Find Definition: 1ms
HTTP Definition: 0ms
CLI Find: 0ms
(pass) Protocol Adapters Integration > Performance Across Adapters > should meet performance targets across all adapters [13.27ms]

tests/step4_pattern-learner.test.ts:
Created new pattern candidate: getUser -> fetchUser
Promoted candidate to pattern: 80f33fc0-8387-4ae8-806b-5ded2e73a0dd (confidence: 0.92)
(pass) Step 4: PatternLearner > promotes candidate to pattern after threshold [11.37ms]
Created new pattern candidate: getItem -> fetchItem
(pass) Step 4: PatternLearner > strengthens existing pattern on further examples [0.58ms]

tests/learning-system.test.ts:
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Learning System Integration > Learning Orchestrator > should initialize all learning components successfully [12.76ms]
258 |             const startTime = Date.now();
259 |             const result = await context.learningOrchestrator.learn(learningContext, learningData);
260 |             const duration = Date.now() - startTime;
261 | 
262 |             // Should meet performance target (<50ms for learning operations)
263 |             expect(duration).toBeLessThan(50);
                                   ^
error: expect(received).toBeLessThan(expected)

Expected: < 50
Received: 55

      at <anonymous> (/home/lightningralf/programming/ontology-lsp/tests/learning-system.test.ts:263:30)
(fail) Learning System Integration > Learning Orchestrator > should orchestrate comprehensive learning from diverse input [59.33ms]
(pass) Learning System Integration > Learning Orchestrator > should provide system health monitoring [1.65ms]
(pass) Learning System Integration > Learning Orchestrator > should provide learning statistics and insights [11.15ms]
(pass) Learning System Integration > Feedback Loop System > should collect and process feedback efficiently [2.15ms]
(pass) Learning System Integration > Feedback Loop System > should adapt pattern confidence based on feedback [17.90ms]
(pass) Learning System Integration > Feedback Loop System > should handle batch feedback processing [14.94ms]
(pass) Learning System Integration > Feedback Loop System > should generate correction patterns from negative feedback [1.25ms]
(pass) Learning System Integration > Evolution Tracking System > should track code changes and detect patterns [0.72ms]
Evolution event seq-1 already exists, skipping insert
Evolution event seq-2 already exists, skipping insert
Evolution event seq-3 already exists, skipping insert
(pass) Learning System Integration > Evolution Tracking System > should analyze architectural trends over time [13.95ms]
(pass) Learning System Integration > Evolution Tracking System > should detect refactoring patterns [1.15ms]
(pass) Learning System Integration > Evolution Tracking System > should provide evolution metrics and analytics [15.05ms]
(pass) Learning System Integration > Team Knowledge System > should facilitate knowledge sharing between team members [6.13ms]
(pass) Learning System Integration > Team Knowledge System > should validate patterns through team consensus [9.44ms]
(pass) Learning System Integration > Team Knowledge System > should resolve conflicts in pattern adoption [4.56ms]
(pass) Learning System Integration > Team Knowledge System > should generate team insights and recommendations [2.18ms]
(pass) Learning System Integration > Cross-System Learning Integration > should correlate feedback with code evolution [1.30ms]
(pass) Learning System Integration > Cross-System Learning Integration > should share learning insights across all systems [3.26ms]
(pass) Learning System Integration > Cross-System Learning Integration > should maintain consistency across learning systems [2.83ms]
Evolution event bulk-evolution-0 already exists, skipping insert
Evolution event bulk-evolution-1 already exists, skipping insert
Evolution event bulk-evolution-2 already exists, skipping insert
Evolution event bulk-evolution-3 already exists, skipping insert
Evolution event bulk-evolution-4 already exists, skipping insert
Evolution event bulk-evolution-5 already exists, skipping insert
Evolution event bulk-evolution-6 already exists, skipping insert
Evolution event bulk-evolution-7 already exists, skipping insert
Evolution event bulk-evolution-8 already exists, skipping insert
Evolution event bulk-evolution-9 already exists, skipping insert
Evolution event bulk-evolution-10 already exists, skipping insert
Evolution event bulk-evolution-11 already exists, skipping insert
Evolution event bulk-evolution-12 already exists, skipping insert
Evolution event bulk-evolution-13 already exists, skipping insert
Evolution event bulk-evolution-14 already exists, skipping insert
Evolution event bulk-evolution-15 already exists, skipping insert
Evolution event bulk-evolution-16 already exists, skipping insert
Evolution event bulk-evolution-17 already exists, skipping insert
Evolution event bulk-evolution-18 already exists, skipping insert
Evolution event bulk-evolution-19 already exists, skipping insert
Evolution event bulk-evolution-20 already exists, skipping insert
Evolution event bulk-evolution-21 already exists, skipping insert
Evolution event bulk-evolution-22 already exists, skipping insert
Evolution event bulk-evolution-23 already exists, skipping insert
Evolution event bulk-evolution-24 already exists, skipping insert
Evolution event bulk-evolution-25 already exists, skipping insert
Evolution event bulk-evolution-26 already exists, skipping insert
Evolution event bulk-evolution-27 already exists, skipping insert
Evolution event bulk-evolution-28 already exists, skipping insert
Evolution event bulk-evolution-29 already exists, skipping insert
Evolution event bulk-evolution-30 already exists, skipping insert
Evolution event bulk-evolution-31 already exists, skipping insert
Evolution event bulk-evolution-32 already exists, skipping insert
Evolution event bulk-evolution-33 already exists, skipping insert
Evolution event bulk-evolution-34 already exists, skipping insert
Evolution event bulk-evolution-35 already exists, skipping insert
Evolution event bulk-evolution-36 already exists, skipping insert
Evolution event bulk-evolution-37 already exists, skipping insert
Evolution event bulk-evolution-38 already exists, skipping insert
Evolution event bulk-evolution-39 already exists, skipping insert
Evolution event bulk-evolution-40 already exists, skipping insert
Evolution event bulk-evolution-41 already exists, skipping insert
Evolution event bulk-evolution-42 already exists, skipping insert
Evolution event bulk-evolution-43 already exists, skipping insert
Evolution event bulk-evolution-44 already exists, skipping insert
Evolution event bulk-evolution-45 already exists, skipping insert
Evolution event bulk-evolution-46 already exists, skipping insert
Evolution event bulk-evolution-47 already exists, skipping insert
Evolution event bulk-evolution-48 already exists, skipping insert
Evolution event bulk-evolution-49 already exists, skipping insert
Processed 100 learning events in 17ms (0.17ms/event)
(pass) Learning System Integration > Learning Performance and Scalability > should handle high-volume learning data efficiently [17.66ms]
(pass) Learning System Integration > Learning Performance and Scalability > should provide real-time learning metrics [1.52ms]
(pass) Learning System Integration > Learning System Resilience > should handle corrupted learning data gracefully [1.64ms]
(pass) Learning System Integration > Learning System Resilience > should recover from component failures [13.90ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Learning System Integration > Learning System Resilience > should provide detailed error reporting for monitoring [40.79ms]

tests/feedback-loop-integration.test.ts:
(pass) FeedbackLoopSystem Integration > System Initialization > should initialize all components correctly [0.18ms]
(pass) FeedbackLoopSystem Integration > System Initialization > should have proper configuration [0.16ms]
(pass) FeedbackLoopSystem Integration > Feedback Recording > should record positive feedback successfully [0.95ms]
(pass) FeedbackLoopSystem Integration > Feedback Recording > should record negative feedback successfully [0.40ms]
(pass) FeedbackLoopSystem Integration > Feedback Recording > should record modification feedback with final value [0.50ms]
(pass) FeedbackLoopSystem Integration > Feedback Recording > should handle multiple feedback types correctly [0.90ms]
(pass) FeedbackLoopSystem Integration > Learning from Corrections > should learn from user corrections [1.47ms]
Created new pattern candidate: getData -> fetchData
(pass) FeedbackLoopSystem Integration > Learning from Corrections > should handle similar corrections (pattern refinement) [3.46ms]
Created new pattern candidate: myFunction -> calculateTotalPrice
(pass) FeedbackLoopSystem Integration > Learning from Corrections > should handle dissimilar corrections (new patterns) [4.24ms]
(pass) FeedbackLoopSystem Integration > Statistics and Analytics > should calculate basic statistics correctly [0.35ms]
(pass) FeedbackLoopSystem Integration > Statistics and Analytics > should track pattern performance [0.30ms]
(pass) FeedbackLoopSystem Integration > Statistics and Analytics > should calculate time-based trends [0.24ms]
(pass) FeedbackLoopSystem Integration > Statistics and Analytics > should handle empty statistics gracefully [62.82ms]
(pass) FeedbackLoopSystem Integration > Insight Generation > should generate insights from feedback patterns [1.39ms]
(pass) FeedbackLoopSystem Integration > Insight Generation > should identify strong patterns in insights [1.65ms]
(pass) FeedbackLoopSystem Integration > Insight Generation > should identify weak patterns in insights [1.45ms]
(pass) FeedbackLoopSystem Integration > Insight Generation > should identify high modification rate [1.74ms]
(pass) FeedbackLoopSystem Integration > Pattern Integration > should track feedback for specific patterns [0.54ms]
(pass) FeedbackLoopSystem Integration > Pattern Integration > should return empty array for non-existent pattern [4.78ms]
(pass) FeedbackLoopSystem Integration > Pattern Integration > should calculate pattern confidence correctly [0.78ms]
(pass) FeedbackLoopSystem Integration > Error Handling and Edge Cases > should handle corrupted feedback data gracefully [0.41ms]
(pass) FeedbackLoopSystem Integration > Error Handling and Edge Cases > should handle missing pattern learner gracefully [0.66ms]
(pass) FeedbackLoopSystem Integration > Error Handling and Edge Cases > should handle database errors gracefully [0.39ms]
(pass) FeedbackLoopSystem Integration > Performance Requirements > should record feedback within performance targets [1.48ms]
(pass) FeedbackLoopSystem Integration > Performance Requirements > should generate insights within performance targets [2.45ms]
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 11ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 12ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 13ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 13ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 13ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 13ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 13ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 13ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
FeedbackLoopSystem.recordFeedback took 14ms (target: 10ms)
(pass) FeedbackLoopSystem Integration > Performance Requirements > should handle high volume feedback efficiently [15.00ms]

tests/bloom-filter-fix.test.ts:
error: Test "first-time search should work (not blocked by empty bloom filter)" timed out after 5016ms (killed 4 dangling processes)
(fail) Bloom Filter Fix > first-time search should work (not blocked by empty bloom filter) [5017.15ms]
(pass) Bloom Filter Fix > repeated search for non-existent symbol should use bloom filter negative cache [295.48ms]
(pass) Bloom Filter Fix > bloom filter should not affect positive results [71.25ms]
(pass) Bloom Filter Fix > bloom filter performance benefit for negative results [732.39ms]
(pass) Bloom Filter Fix > metrics should reflect bloom filter usage [260.20ms]

tests/test-helpers.test.ts:
(pass) Test Helpers > getProjectRoot should find project root [1.46ms]
(pass) Test Helpers > getProjectPath should create paths relative to project root [0.12ms]
(pass) Test Helpers > testPaths should provide consistent paths [0.18ms]
(pass) Test Helpers > createTestConfig should return valid config [0.08ms]
(pass) Test Helpers > createTestConfig should accept overrides [0.04ms]
(pass) Test Helpers > toFileUri should convert paths to file URIs [0.06ms]
(pass) Test Helpers > fromFileUri should convert file URIs back to paths [0.05ms]
(pass) Test Helpers > fromFileUri should handle non-URI strings [0.03ms]
(pass) Test Helpers > runtime detection [0.03ms]
(pass) Test Helpers > environment detection [0.03ms]

tests/step1_similarity.test.ts:
(pass) Step 1: SimilarityCalculator > identical identifiers have similarity 1 [0.21ms]
(pass) Step 1: SimilarityCalculator > synonym based identifiers show reasonable similarity [1.09ms]
(pass) Step 1: SimilarityCalculator > findMostSimilar returns the closest candidate based on actual algorithm [0.17ms]

tests/integration.test.ts:
(pass) Integration Tests > Claude Tools Layer - fuzzy search [143.51ms]
(pass) Integration Tests > Tree-sitter Layer - AST parsing [131.34ms]
Added concept: testFunction (test-1)
(pass) Integration Tests > Ontology Engine - concept management [55.67ms]
Created new pattern candidate: getUser -> fetchUser
Promoted candidate to pattern: e385bd5e-4cf3-4601-8af5-e18030984ddf (confidence: 0.92)
(pass) Integration Tests > Pattern Learner - learning patterns [56.54ms]
Added concept: getUser (c8ff8f91-9706-4191-92d0-00025478721d)
(pass) Integration Tests > Knowledge Spreader - propagation analysis [119.32ms]
(pass) Performance Tests > handles large file search efficiently [450.33ms]
(pass) Performance Tests > cache improves repeated queries [30.97ms]
Added concept: concept0 (concurrent-0)
Added concept: concept1 (concurrent-1)
Added concept: concept2 (concurrent-2)
Added concept: concept3 (concurrent-3)
Added concept: concept4 (concurrent-4)
Added concept: concept5 (concurrent-5)
Added concept: concept6 (concurrent-6)
Added concept: concept7 (concurrent-7)
Added concept: concept8 (concurrent-8)
Added concept: concept9 (concurrent-9)
(pass) Performance Tests > handles concurrent operations [55.99ms]
Added concept: memConcept0 (memory-0)
Added concept: memConcept1 (memory-1)
Added concept: memConcept2 (memory-2)
Added concept: memConcept3 (memory-3)
Added concept: memConcept4 (memory-4)
Added concept: memConcept5 (memory-5)
Added concept: memConcept6 (memory-6)
Added concept: memConcept7 (memory-7)
Added concept: memConcept8 (memory-8)
Added concept: memConcept9 (memory-9)
Added concept: memConcept10 (memory-10)
Added concept: memConcept11 (memory-11)
Added concept: memConcept12 (memory-12)
Added concept: memConcept13 (memory-13)
Added concept: memConcept14 (memory-14)
Added concept: memConcept15 (memory-15)
Added concept: memConcept16 (memory-16)
Added concept: memConcept17 (memory-17)
Added concept: memConcept18 (memory-18)
Added concept: memConcept19 (memory-19)
Added concept: memConcept20 (memory-20)
Added concept: memConcept21 (memory-21)
Added concept: memConcept22 (memory-22)
Added concept: memConcept23 (memory-23)
Added concept: memConcept24 (memory-24)
Added concept: memConcept25 (memory-25)
Added concept: memConcept26 (memory-26)
Added concept: memConcept27 (memory-27)
Added concept: memConcept28 (memory-28)
Added concept: memConcept29 (memory-29)
Added concept: memConcept30 (memory-30)
Added concept: memConcept31 (memory-31)
Added concept: memConcept32 (memory-32)
Added concept: memConcept33 (memory-33)
Added concept: memConcept34 (memory-34)
Added concept: memConcept35 (memory-35)
Added concept: memConcept36 (memory-36)
Added concept: memConcept37 (memory-37)
Added concept: memConcept38 (memory-38)
Added concept: memConcept39 (memory-39)
Added concept: memConcept40 (memory-40)
Added concept: memConcept41 (memory-41)
Added concept: memConcept42 (memory-42)
Added concept: memConcept43 (memory-43)
Added concept: memConcept44 (memory-44)
Added concept: memConcept45 (memory-45)
Added concept: memConcept46 (memory-46)
Added concept: memConcept47 (memory-47)
Added concept: memConcept48 (memory-48)
Added concept: memConcept49 (memory-49)
Added concept: memConcept50 (memory-50)
Added concept: memConcept51 (memory-51)
Added concept: memConcept52 (memory-52)
Added concept: memConcept53 (memory-53)
Added concept: memConcept54 (memory-54)
Added concept: memConcept55 (memory-55)
Added concept: memConcept56 (memory-56)
Added concept: memConcept57 (memory-57)
Added concept: memConcept58 (memory-58)
Added concept: memConcept59 (memory-59)
Added concept: memConcept60 (memory-60)
Added concept: memConcept61 (memory-61)
Added concept: memConcept62 (memory-62)
Added concept: memConcept63 (memory-63)
Added concept: memConcept64 (memory-64)
Added concept: memConcept65 (memory-65)
Added concept: memConcept66 (memory-66)
Added concept: memConcept67 (memory-67)
Added concept: memConcept68 (memory-68)
Added concept: memConcept69 (memory-69)
Added concept: memConcept70 (memory-70)
Added concept: memConcept71 (memory-71)
Added concept: memConcept72 (memory-72)
Added concept: memConcept73 (memory-73)
Added concept: memConcept74 (memory-74)
Added concept: memConcept75 (memory-75)
Added concept: memConcept76 (memory-76)
Added concept: memConcept77 (memory-77)
Added concept: memConcept78 (memory-78)
Added concept: memConcept79 (memory-79)
Added concept: memConcept80 (memory-80)
Added concept: memConcept81 (memory-81)
Added concept: memConcept82 (memory-82)
Added concept: memConcept83 (memory-83)
Added concept: memConcept84 (memory-84)
Added concept: memConcept85 (memory-85)
Added concept: memConcept86 (memory-86)
Added concept: memConcept87 (memory-87)
Added concept: memConcept88 (memory-88)
Added concept: memConcept89 (memory-89)
Added concept: memConcept90 (memory-90)
Added concept: memConcept91 (memory-91)
Added concept: memConcept92 (memory-92)
Added concept: memConcept93 (memory-93)
Added concept: memConcept94 (memory-94)
Added concept: memConcept95 (memory-95)
Added concept: memConcept96 (memory-96)
Added concept: memConcept97 (memory-97)
Added concept: memConcept98 (memory-98)
Added concept: memConcept99 (memory-99)
(pass) Performance Tests > memory usage stays bounded [128.11ms]

tests/unified-core.test.ts:
Pattern Learner Layer initialized successfully
Layer layer1 already registered, skipping...
Layer layer2 already registered, skipping...
Layer layer3 already registered, skipping...
Layer layer4 already registered, skipping...
Layer layer5 already registered, skipping...
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Unified Core Architecture > Initialization and Health > should initialize all components successfully [0.44ms]
(pass) Unified Core Architecture > Initialization and Health > should have learning capabilities enabled [0.50ms]
(pass) Unified Core Architecture > Find Definition Operations > should find definitions with progressive enhancement [10.08ms]
145 |             const result1 = await context.codeAnalyzer.findDefinition(request);
146 |             expect(result1.cacheHit).toBe(false);
147 | 
148 |             // Second request - should use cache
149 |             const result2 = await context.codeAnalyzer.findDefinition(request);
150 |             expect(result2.cacheHit).toBe(true);
                                           ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/home/lightningralf/programming/ontology-lsp/tests/unified-core.test.ts:150:38)
(fail) Unified Core Architecture > Find Definition Operations > should use cache for repeated requests [16.49ms]
(pass) Unified Core Architecture > Find Definition Operations > should handle invalid requests gracefully [0.37ms]
(pass) Unified Core Architecture > Find Definition Operations > should respect result limits [0.24ms]
(pass) Unified Core Architecture > Find References Operations > should find references using cascade approach [32.18ms]
(pass) Unified Core Architecture > Find References Operations > should deduplicate references from multiple layers [0.37ms]
(pass) Unified Core Architecture > Rename Operations > should prepare rename with validation [0.18ms]
Created new pattern candidate: TestFunction -> RenamedFunction
(pass) Unified Core Architecture > Rename Operations > should execute rename with learning and propagation [8.40ms]
(pass) Unified Core Architecture > Rename Operations > should reject invalid rename requests [0.45ms]
(pass) Unified Core Architecture > Completion Operations > should provide intelligent completions using patterns [8.47ms]
(pass) Unified Core Architecture > Completion Operations > should rank completions by confidence [2.61ms]
(pass) Unified Core Architecture > Learning and Feedback > should record feedback and learn from corrections [7.30ms]
Would update stats for pipeline pattern_feedback_cycle
(pass) Unified Core Architecture > Learning and Feedback > should track file changes for evolution [0.57ms]
(pass) Unified Core Architecture > Learning and Feedback > should provide learning insights and recommendations [0.16ms]
Pattern Learner Layer initialized successfully
Layer layer1 already registered, skipping...
Layer layer2 already registered, skipping...
Layer layer3 already registered, skipping...
Layer layer4 already registered, skipping...
Layer layer5 already registered, skipping...
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Unified Core Architecture > Error Handling and Resilience > should handle layer failures gracefully [201.31ms]
Pattern Learner Layer initialized successfully
Layer layer1 already registered, skipping...
Layer layer2 already registered, skipping...
Layer layer3 already registered, skipping...
Layer layer4 already registered, skipping...
Layer layer5 already registered, skipping...
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Unified Core Architecture > Error Handling and Resilience > should emit error events for monitoring [168.05ms]
(pass) Unified Core Architecture > Error Handling and Resilience > should validate requests before processing [16.36ms]
(pass) Unified Core Architecture > Performance Optimization > should meet performance targets for batch operations [66.84ms]
(pass) Unified Core Architecture > Performance Optimization > should efficiently use cache across different operation types [0.46ms]
547 |                 result.performance.layer2 +
548 |                 result.performance.layer3 +
549 |                 result.performance.layer4 +
550 |                 result.performance.layer5;
551 | 
552 |             expect(totalLayerTime).toBeGreaterThan(0);
                                         ^
error: expect(received).toBeGreaterThan(expected)

Expected: > 0
Received: 0

      at <anonymous> (/home/lightningralf/programming/ontology-lsp/tests/unified-core.test.ts:552:36)
(fail) Unified Core Architecture > Layer Integration > should progressively enhance results across all layers [7.39ms]
Layer layer1 already registered, skipping...
Layer layer3 already registered, skipping...
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Unified Core Architecture > Layer Integration > should handle layer-specific configurations [61.62ms]

tests/smart-escalation.test.ts:
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > No Results Scenarios > should escalate when Layer 1 found no results [0.17ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > High Confidence Definition Scenarios > should skip Layer 2 with multiple high-confidence definitions [5.11ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > High Confidence Definition Scenarios > should skip Layer 2 with single very high confidence definition [0.14ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > High Confidence Definition Scenarios > should skip Layer 2 with multiple likely definitions with high average confidence [0.14ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Medium Confidence Scenarios > should escalate with medium confidence definitions [0.18ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Medium Confidence Scenarios > should escalate with mixed confidence levels [0.17ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Import vs Definition Scenarios > should escalate when results are primarily imports [0.30ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Import vs Definition Scenarios > should escalate when results are mixed imports and usages [0.11ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Usage vs Definition Scenarios > should escalate when results are primarily usage [0.14ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Usage vs Definition Scenarios > should skip Layer 2 when mixed with high-confidence definitions [0.15ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Unknown Category Scenarios > should escalate when results have unknown categories [0.17ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Unknown Category Scenarios > should escalate when mixed unknown and low-confidence definitions [0.25ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Legacy Definitions Without Categorization > should escalate when definitions lack categorization metadata [0.15ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Legacy Definitions Without Categorization > should escalate when mixed legacy and categorized results [0.20ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Confidence Threshold Edge Cases > should escalate when category confidence is high but overall confidence is low [0.12ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Confidence Threshold Edge Cases > should escalate when overall confidence is high but category confidence is low [0.20ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Confidence Threshold Edge Cases > should handle exactly threshold values [0.17ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Real-world Scenarios > should skip Layer 2 for clear class definition search [0.10ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Real-world Scenarios > should escalate for ambiguous search results [0.17ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Real-world Scenarios > should skip Layer 2 for multiple exported functions found [1.96ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Real-world Scenarios > should escalate when searching for common utility functions [0.18ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Performance Optimization Validation > should consistently make fast decisions [0.25ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Performance Optimization Validation > should handle large numbers of definitions efficiently [0.26ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Error Handling > should handle malformed definition objects gracefully [0.25ms]
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
(pass) Smart Escalation Logic > Error Handling > should handle null/undefined category metadata [0.14ms]

tests/enhanced-search-async.test.ts:
(pass) Async Enhanced Search Performance > Non-blocking Execution > should not block event loop during search [22.67ms]
(pass) Async Enhanced Search Performance > Non-blocking Execution > multiple searches should run in parallel [104.93ms]
(pass) Async Enhanced Search Performance > Streaming Results > should emit results as they arrive [37.57ms]
(pass) Async Enhanced Search Performance > Streaming Results > should support early termination [26.04ms]
(pass) Async Enhanced Search Performance > Smart Caching > cached results should return instantly [18.42ms]
(pass) Async Enhanced Search Performance > Smart Caching > cache should invalidate on file change [196.26ms]
(pass) Async Enhanced Search Performance > Parallel Search > should search multiple directories in parallel [79.59ms]
(skip) Async Enhanced Search Performance > Performance Benchmarks > Layer 1 performance should meet 50ms target
(skip) Async Enhanced Search Performance > Performance Benchmarks > should handle large result sets efficiently
(pass) Async Enhanced Search Performance > Error Handling > should handle timeout gracefully [15.38ms]
(pass) Async Enhanced Search Performance > Error Handling > should handle invalid paths gracefully [40.41ms]
(pass) Async Enhanced Search Performance > Error Handling > should handle concurrent cancellations [32.77ms]
(pass) Process Pool Management > should limit concurrent processes [123.18ms]
(pass) Cache Intelligence > should handle cache size limits [0.91ms]
(pass) Cache Intelligence > should respect TTL [153.51ms]

tests/smart-escalation-unit.test.ts:
(pass) Smart Escalation Logic (Unit Tests) > No Results Scenarios > should escalate when Layer 1 found no results [0.16ms]
(pass) Smart Escalation Logic (Unit Tests) > High Confidence Definition Scenarios > should skip Layer 2 with multiple high-confidence definitions [0.18ms]
(pass) Smart Escalation Logic (Unit Tests) > High Confidence Definition Scenarios > should skip Layer 2 with single very high confidence definition [0.07ms]
(pass) Smart Escalation Logic (Unit Tests) > High Confidence Definition Scenarios > should skip Layer 2 with multiple likely definitions with high average confidence [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Medium Confidence Scenarios > should escalate with medium confidence definitions [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Medium Confidence Scenarios > should escalate with mixed confidence levels [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Import vs Definition Scenarios > should escalate when results are primarily imports [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Import vs Definition Scenarios > should escalate when results are mixed imports and usages [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Usage vs Definition Scenarios > should escalate when results are primarily usage [0.02ms]
(pass) Smart Escalation Logic (Unit Tests) > Usage vs Definition Scenarios > should skip Layer 2 when mixed with high-confidence definitions [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Unknown Category Scenarios > should escalate when results have unknown categories [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Unknown Category Scenarios > should escalate when mixed unknown and low-confidence definitions [0.04ms]
(pass) Smart Escalation Logic (Unit Tests) > Legacy Definitions Without Categorization > should escalate when definitions lack categorization metadata [0.02ms]
(pass) Smart Escalation Logic (Unit Tests) > Legacy Definitions Without Categorization > should escalate when mixed legacy and categorized results [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Confidence Threshold Edge Cases > should escalate when category confidence is high but overall confidence is low [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Confidence Threshold Edge Cases > should escalate when overall confidence is high but category confidence is low [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Confidence Threshold Edge Cases > should handle exactly threshold values [0.02ms]
(pass) Smart Escalation Logic (Unit Tests) > Real-world Scenarios > should skip Layer 2 for clear class definition search [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Real-world Scenarios > should escalate for ambiguous search results [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Real-world Scenarios > should skip Layer 2 for multiple exported functions found [0.07ms]
(pass) Smart Escalation Logic (Unit Tests) > Real-world Scenarios > should escalate when searching for common utility functions [0.03ms]
(pass) Smart Escalation Logic (Unit Tests) > Performance and Edge Cases > should handle large numbers of definitions efficiently [8.54ms]
(pass) Smart Escalation Logic (Unit Tests) > Performance and Edge Cases > should handle malformed definition objects gracefully [0.20ms]
(pass) Smart Escalation Logic (Unit Tests) > Performance and Edge Cases > should handle null/undefined category metadata [0.05ms]
(pass) Smart Escalation Logic (Unit Tests) > Algorithm Validation > should consistently make fast decisions [1.34ms]
(pass) Smart Escalation Logic (Unit Tests) > Algorithm Validation > should have consistent behavior with equivalent inputs [0.15ms]

tests/step2_concept-builder.test.ts:
(pass) Step 2: ConceptBuilder > builds concept with metadata, tags and side effects [8.36ms]

tests/step5_knowledge-spreader.test.ts:
(pass) Step 5: KnowledgeSpreader > analyzePropagationPotential returns low for minimal context [0.25ms]
(pass) Step 5: KnowledgeSpreader > analyzePropagationPotential increases with history and module [0.13ms]

tests/layer1-categorization.test.ts:
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize export class definitions with high confidence [0.20ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize interface definitions [0.10ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize type definitions [0.07ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize enum definitions [0.04ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize const variable declarations [0.06ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize exported const declarations [0.07ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize function declarations [0.06ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize exported functions [0.05ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize arrow function assignments [0.07ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize method definitions in classes [0.06ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize private methods [0.08ms]
(pass) Layer 1 Smart Categorization > Definition Categorization > should categorize public methods [0.06ms]
(pass) Layer 1 Smart Categorization > Import Categorization > should categorize named imports with high confidence [0.05ms]
(pass) Layer 1 Smart Categorization > Import Categorization > should categorize default imports [0.06ms]
(pass) Layer 1 Smart Categorization > Import Categorization > should categorize generic import statements [0.05ms]
(pass) Layer 1 Smart Categorization > Import Categorization > should categorize CommonJS require statements [0.03ms]
(pass) Layer 1 Smart Categorization > Import Categorization > should categorize destructured require statements [0.09ms]
(pass) Layer 1 Smart Categorization > Usage Categorization > should categorize constructor usage with high confidence [0.15ms]
(pass) Layer 1 Smart Categorization > Usage Categorization > should categorize function calls [0.10ms]
(pass) Layer 1 Smart Categorization > Usage Categorization > should categorize method calls [0.22ms]
(pass) Layer 1 Smart Categorization > Usage Categorization > should categorize property assignment as usage [0.15ms]
(pass) Layer 1 Smart Categorization > Usage Categorization > should categorize chained method calls [0.12ms]
(pass) Layer 1 Smart Categorization > Usage Categorization > should distinguish usage in expressions [0.12ms]
(pass) Layer 1 Smart Categorization > Assignment vs Usage Detection > should categorize property assignment as usage [0.11ms]
(pass) Layer 1 Smart Categorization > Assignment vs Usage Detection > should categorize object property assignment as usage [0.33ms]
(pass) Layer 1 Smart Categorization > Unknown Patterns > should categorize unrecognizable patterns as unknown [0.14ms]
(pass) Layer 1 Smart Categorization > Unknown Patterns > should categorize string literals as unknown [0.04ms]
(pass) Layer 1 Smart Categorization > Edge Cases > should handle empty text gracefully [0.22ms]
(pass) Layer 1 Smart Categorization > Edge Cases > should handle whitespace-only text [0.05ms]
(pass) Layer 1 Smart Categorization > Edge Cases > should handle special characters in identifier [0.08ms]
(pass) Layer 1 Smart Categorization > Edge Cases > should handle regex metacharacters in identifier [0.07ms]
(pass) Layer 1 Smart Categorization > TypeScript Specific Patterns > should categorize TypeScript interface implementations [0.15ms]
(pass) Layer 1 Smart Categorization > TypeScript Specific Patterns > should categorize generic type parameters [0.27ms]
(pass) Layer 1 Smart Categorization > TypeScript Specific Patterns > should categorize type annotations [0.15ms]
(pass) Layer 1 Smart Categorization > Confidence Score Validation > should return confidence scores between 0 and 1 [0.38ms]
(pass) Layer 1 Smart Categorization > Confidence Score Validation > should assign higher confidence to more specific patterns [0.23ms]
(pass) Layer 1 Smart Categorization > Real-world Code Examples > should correctly categorize AsyncEnhancedGrep class definition [0.05ms]
(pass) Layer 1 Smart Categorization > Real-world Code Examples > should correctly categorize AsyncEnhancedGrep import [0.03ms]
(pass) Layer 1 Smart Categorization > Real-world Code Examples > should correctly categorize AsyncEnhancedGrep constructor usage [0.03ms]
(pass) Layer 1 Smart Categorization > Real-world Code Examples > should correctly categorize method calls in fluent interfaces [0.11ms]

tests/consistency.test.ts:
Would save pipeline comprehensive_learning to database
Would save pipeline pattern_feedback_cycle to database
Would save pipeline daily_insights to database
Would setup cron job for pipeline daily_insights with schedule: 0 9 * * *
Would load additional pipelines from database
[INFO] Performance: tool_find_definition completed in 1ms {
  operation: "tool_find_definition",
  duration: 1,
  success: true,
  resultSize: 305,
}
[INFO] Performance: tool_find_definition completed in 2ms {
  operation: "tool_find_definition",
  duration: 2,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Definition Result Counts: {
  core: 0,
  lsp: 0,
  mcp: 0,
  http: 0,
  cli: 0,
}
core vs lsp: consistent
core vs mcp: consistent
core vs http: consistent
core vs cli: consistent
lsp vs mcp: consistent
lsp vs http: consistent
lsp vs cli: consistent
mcp vs http: consistent
mcp vs cli: consistent
http vs cli: consistent
(pass) Cross-Protocol Consistency > Definition Result Consistency > should return consistent definition results across all protocols [99.67ms]
Testing edge case: empty_symbol
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Parameter 'symbol' cannot be empty",
  stack: "Error: Parameter 'symbol' cannot be empty\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:783:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
[WARN] MCP-Server: Not retrying due to error type {
  error: "Parameter 'symbol' cannot be empty",
  type: "McpError",
}
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Parameter 'symbol' cannot be empty",
  stack: "Error: Parameter 'symbol' cannot be empty\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:783:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Edge case empty_symbol results: {
  core: 0,
  lsp: 0,
  mcp: 0,
  http: 0,
  cli: 0,
}
Edge case empty_symbol errors: {
  core: false,
  lsp: false,
  mcp: false,
  http: false,
  cli: false,
}
Testing edge case: non_existent_symbol
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  resultSize: 305,
}
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Edge case non_existent_symbol results: {
  core: 0,
  lsp: 0,
  mcp: 0,
  http: 0,
  cli: 0,
}
Edge case non_existent_symbol errors: {
  core: false,
  lsp: false,
  mcp: false,
  http: false,
  cli: false,
}
Testing edge case: invalid_file
[INFO] Performance: tool_find_definition completed in 1ms {
  operation: "tool_find_definition",
  duration: 1,
  success: true,
  resultSize: 305,
}
[INFO] Performance: tool_find_definition completed in 1ms {
  operation: "tool_find_definition",
  duration: 1,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Edge case invalid_file results: {
  core: 0,
  lsp: 0,
  mcp: 0,
  http: 0,
  cli: 0,
}
Edge case invalid_file errors: {
  core: false,
  lsp: false,
  mcp: false,
  http: false,
  cli: false,
}
(pass) Cross-Protocol Consistency > Definition Result Consistency > should maintain consistency for edge cases [41.58ms]
[INFO] Performance: tool_find_references completed in 29ms {
  operation: "tool_find_references",
  duration: 29,
  success: true,
  resultSize: 606,
}
[INFO] Performance: tool_find_references completed in 29ms {
  operation: "tool_find_references",
  duration: 29,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/references Endpoint: /references Method: POST
Reference Result Counts: {
  core: 1,
  lsp: 0,
  mcp: 1,
  http: 1,
  cli: 1,
}
Reference inconsistency: core=1 vs lsp=0
545 |                             `Reference inconsistency: ${protocol1}=${normalizedResults[protocol1].length} vs ${protocol2}=${normalizedResults[protocol2].length}`
546 |                         );
547 |                     }
548 | 
549 |                     // Allow some flexibility for references as different protocols may have different scoping
550 |                     expect(isConsistent).toBe(true);
                                               ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/home/lightningralf/programming/ontology-lsp/tests/consistency.test.ts:550:42)
(fail) Cross-Protocol Consistency > Reference Result Consistency > should return consistent reference results across protocols [95.19ms]
Testing error scenario: null_request
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Error scenario null_request results: {
  core: {
    hasError: true,
    errorType: "InvalidRequestError",
  },
  lsp: {
    hasError: true,
    errorType: "Unknown",
  },
  mcp: {
    hasError: true,
    errorType: "TypeError",
  },
  http: {
    hasError: true,
    errorType: "HTTP_400",
    statusCode: 400,
  },
  cli: {
    hasError: true,
    errorType: "CLI_Error",
  },
}
Testing error scenario: malformed_request
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Missing required parameter: symbol",
  stack: "Error: Missing required parameter: symbol\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:779:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
[WARN] MCP-Server: Not retrying due to error type {
  error: "Missing required parameter: symbol",
  type: "McpError",
}
[ERROR] MCP-Server: tool_find_definition failed {
  name: "Error",
  message: "Missing required parameter: symbol",
  stack: "Error: Missing required parameter: symbol\n    at new McpError (/home/lightningralf/programming/ontology-lsp/node_modules/@modelcontextprotocol/sdk/dist/types.js:991:9)\n    at createMcpError (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:208:30)\n    at validateArgs (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:779:23)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:230:14)\n    at handleFindDefinition (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:229:40)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:197:45)\n    at <anonymous> (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:89)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:85:55)\n    at withErrorHandling (/home/lightningralf/programming/ontology-lsp/src/core/utils/error-handler.ts:57:9)\n    at handleToolCall (/home/lightningralf/programming/ontology-lsp/src/adapters/mcp-adapter.ts:172:26)",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Error scenario malformed_request results: {
  core: {
    hasError: true,
    errorType: "CoreError",
  },
  lsp: {
    hasError: true,
    errorType: "Unknown",
  },
  mcp: {
    hasError: false,
    errorType: "none",
  },
  http: {
    hasError: true,
    errorType: "HTTP_400",
    statusCode: 400,
  },
  cli: {
    hasError: true,
    errorType: "CLI_Error",
  },
}
Testing error scenario: timeout_scenario
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  resultSize: 305,
}
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Error scenario timeout_scenario results: {
  core: {
    hasError: false,
    errorType: "none",
  },
  lsp: {
    hasError: false,
    errorType: "none",
  },
  mcp: {
    hasError: false,
    errorType: "none",
  },
  http: {
    hasError: false,
    errorType: "none",
    statusCode: 200,
  },
  cli: {
    hasError: false,
    errorType: "none",
  },
}
(pass) Cross-Protocol Consistency > Error Handling Consistency > should handle errors consistently across protocols [3043.98ms]
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  resultSize: 305,
}
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  resultSize: 305,
}
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
Cache Performance Analysis:
First run times: {
  core: 4.173471000001882,
  lsp: 0.1549250000025495,
  mcp: 0.2653139999965788,
  http: 0.05547600000136299,
  cli: 0.03822300000319956,
}
Second run times: {
  core: 0.017884000000776723,
  lsp: 0.014438000005611684,
  mcp: 0.1362989999979618,
  http: 0.02309400000376627,
  cli: 0.02430599999934202,
}
Cache hit indicators: {
  core: false,
  lsp: false,
  mcp: false,
  http: false,
  cli: false,
}
842 |             console.log('First run times:', firstRunTimes);
843 |             console.log('Second run times:', secondRunTimes);
844 |             console.log('Cache hit indicators:', cacheHitIndicators);
845 | 
846 |             // Core should show cache hits
847 |             expect(cacheHitIndicators.core).toBe(true);
                                                  ^
error: expect(received).toBe(expected)

Expected: true
Received: false

      at <anonymous> (/home/lightningralf/programming/ontology-lsp/tests/consistency.test.ts:847:45)
(fail) Cross-Protocol Consistency > Caching Consistency > should share cache benefits across all protocols [6.05ms]
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  resultSize: 305,
}
[INFO] Performance: tool_find_definition completed in 0ms {
  operation: "tool_find_definition",
  duration: 0,
  success: true,
  attempt: 1,
  component: "MCPAdapter",
}
[DEBUG] API path: /api/v1/definition Endpoint: /definition Method: POST
(pass) Cross-Protocol Consistency > Caching Consistency > should maintain cache coherence across protocol boundaries [8.26ms]
Learning System Integration: {
  insightsCount: 1,
  recommendationsCount: 1,
  patternsCount: 1,
  systemHealth: "healthy",
}
(pass) Cross-Protocol Consistency > Learning System Integration > should share learning insights across protocols [13.04ms]
Would update stats for pipeline pattern_feedback_cycle
Would update stats for pipeline pattern_feedback_cycle
Learning Persistence Test: {
  beforeRestart: {
    insights: 1,
    recommendations: 1,
    patterns: 1,
  },
  afterRestart: {
    insights: 1,
    recommendations: 1,
    patterns: 1,
  },
}
(pass) Cross-Protocol Consistency > Learning System Integration > should maintain learning consistency across protocol restarts [10.01ms]
Would update stats for pipeline pattern_feedback_cycle
(skip) Cross-Protocol Consistency > Performance Consistency > should maintain consistent performance characteristics across protocols

test/adapters/mcp.test.ts:
(pass) MCP Adapter > Tool Definitions > should define all required tools [0.21ms]
(pass) MCP Adapter > Tool Definitions > each tool should have valid schema [0.11ms]
(pass) MCP Adapter > Translation Layer > should translate find_definition request correctly [0.10ms]
(pass) MCP Adapter > Translation Layer > should translate find_definition response correctly [0.16ms]
(pass) MCP Adapter > Translation Layer > should handle empty results gracefully [0.05ms]
(pass) MCP Adapter > Translation Layer > should translate find_references response with grouping [0.24ms]
(pass) MCP Adapter > Translation Layer > should translate rename response with preview [0.13ms]
(pass) MCP Adapter > Translation Layer > should translate diagnostics with severity grouping [0.11ms]
(pass) MCP Adapter > Error Handling > should format errors correctly [0.14ms]
(pass) MCP Adapter > Pattern Learning > should translate pattern request correctly [0.05ms]
(pass) MCP Adapter > Pattern Learning > should translate feedback request correctly [0.05ms]
(pass) MCP Adapter > Knowledge Graph > should translate concept request correctly [0.04ms]
(pass) MCP Adapter > Knowledge Graph > should translate concept response correctly [0.07ms]
(pass) MCP Adapter > Knowledge Graph > should translate relationship response with grouping [0.22ms]
(pass) MCP Adapter > Workspace Context > should extract workspace context from various formats [0.08ms]
(pass) MCP Tool Schemas > find_definition schema should be valid [0.05ms]
(pass) MCP Tool Schemas > rename_symbol schema should require symbol and newName [0.06ms]
(pass) MCP Tool Schemas > get_hover schema should require all location fields [0.07ms]
(pass) MCP Tool Schemas > learn_pattern schema should have action enum [0.06ms]

tests/benchmarks/tool-comparison.test.ts:

tests/e2e/e2e-integration.test.ts:
(skip) End-to-End Integration Tests > Performance Benchmarking with Real Codebases > should run comprehensive performance benchmarks
(skip) End-to-End Integration Tests > Performance Benchmarking with Real Codebases > should demonstrate performance scaling across repository sizes
(skip) End-to-End Integration Tests > Advanced Memory Management and Validation > should perform comprehensive memory validation
(skip) End-to-End Integration Tests > Advanced Memory Management and Validation > should detect and handle memory pressure scenarios

tests/integration/lsp-server.test.ts:
(pass) LSP Server Integration Tests > Server responds to initialize request [329.95ms]
(pass) LSP Server Integration Tests > Server handles hover request [32.99ms]
(pass) LSP Server Integration Tests > Server handles definition request [1648.06ms]
(pass) LSP Server Integration Tests > Server handles custom ontology requests [15.26ms]
(pass) LSP Server Integration Tests > Server handles concept graph request [14.55ms]

7 tests skipped:
(skip) Async Enhanced Search Performance > Performance Benchmarks > Layer 1 performance should meet 50ms target
(skip) Async Enhanced Search Performance > Performance Benchmarks > should handle large result sets efficiently
(skip) Cross-Protocol Consistency > Performance Consistency > should maintain consistent performance characteristics across protocols
(skip) End-to-End Integration Tests > Performance Benchmarking with Real Codebases > should run comprehensive performance benchmarks
(skip) End-to-End Integration Tests > Performance Benchmarking with Real Codebases > should demonstrate performance scaling across repository sizes
(skip) End-to-End Integration Tests > Advanced Memory Management and Validation > should perform comprehensive memory validation
(skip) End-to-End Integration Tests > Advanced Memory Management and Validation > should detect and handle memory pressure scenarios


6 tests failed:
(fail) Learning System Integration > Learning Orchestrator > should orchestrate comprehensive learning from diverse input [59.33ms]
(fail) Bloom Filter Fix > first-time search should work (not blocked by empty bloom filter) [5017.15ms]
(fail) Unified Core Architecture > Find Definition Operations > should use cache for repeated requests [16.49ms]
(fail) Unified Core Architecture > Layer Integration > should progressively enhance results across all layers [7.39ms]
(fail) Cross-Protocol Consistency > Reference Result Consistency > should return consistent reference results across protocols [95.19ms]
(fail) Cross-Protocol Consistency > Caching Consistency > should share cache benefits across all protocols [6.05ms]

 301 pass
 7 skip
 6 fail
 884 expect() calls
Ran 314 tests across 25 files. [42.07s]
