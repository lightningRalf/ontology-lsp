# Ontology-LSP Main Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ontology-lsp
  namespace: ontology-lsp
  labels:
    app.kubernetes.io/name: ontology-lsp
    app.kubernetes.io/component: application
    app.kubernetes.io/version: "2.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ontology-lsp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ontology-lsp
        app.kubernetes.io/component: application
        app.kubernetes.io/version: "2.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "7000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      serviceAccountName: ontology-lsp-sa
      containers:
        - name: ontology-lsp
          image: ontology-lsp:2.0.0  # Update with your registry
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 7000
              name: http-api
              protocol: TCP
            - containerPort: 7001
              name: mcp-http
              protocol: TCP
            - containerPort: 7002
              name: lsp-tcp
              protocol: TCP
          env:
            # Configuration from ConfigMap
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: NODE_ENV
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: LOG_LEVEL
            - name: HTTP_API_PORT
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: HTTP_API_PORT
            - name: MCP_HTTP_PORT
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: MCP_HTTP_PORT
            - name: LSP_SERVER_PORT
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: LSP_SERVER_PORT
            - name: CACHE_TTL
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: CACHE_TTL
            - name: PERFORMANCE_MONITORING
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: PERFORMANCE_MONITORING
            - name: PATTERN_LEARNING
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: PATTERN_LEARNING
            - name: OTEL_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: OTEL_ENABLED
            - name: OTEL_SERVICE_NAME
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: OTEL_SERVICE_NAME
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: ontology-lsp-config
                  key: OTEL_EXPORTER_OTLP_ENDPOINT
            
            # Secrets
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: ontology-lsp-secrets
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: ontology-lsp-secrets
                  key: REDIS_URL
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: ontology-lsp-secrets
                  key: JWT_SECRET
            
            # Pod metadata
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          volumeMounts:
            - name: data-storage
              mountPath: /app/data
            - name: temp-storage
              mountPath: /tmp
            - name: logs-storage
              mountPath: /app/logs
          
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
              ephemeral-storage: "1Gi"
            limits:
              memory: "2Gi"
              cpu: "1000m"
              ephemeral-storage: "5Gi"
          
          # Health checks
          startupProbe:
            httpGet:
              path: /health
              port: 7000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 10
          
          livenessProbe:
            httpGet:
              path: /health
              port: 7000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /ready
              port: 7000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          # Security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1001
            runAsGroup: 1001
            capabilities:
              drop:
                - ALL
      
      # Pod configuration
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      
      # Node affinity for performance
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: ["ontology-lsp"]
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: node.kubernetes.io/instance-type
                    operator: In
                    values: ["c5.large", "c5.xlarge", "c6i.large", "c6i.xlarge"]
      
      # Tolerations for dedicated nodes (if applicable)
      tolerations:
        - key: "app"
          operator: "Equal"
          value: "ontology-lsp"
          effect: "NoSchedule"
      
      volumes:
        - name: data-storage
          emptyDir:
            sizeLimit: 2Gi
        - name: temp-storage
          emptyDir:
            sizeLimit: 1Gi
        - name: logs-storage
          emptyDir:
            sizeLimit: 500Mi
