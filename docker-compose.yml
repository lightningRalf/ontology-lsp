# Ontology-LSP Local Development Environment
# Full-stack deployment with all dependencies

version: '3.8'

services:
  # ================================
  # Core Database Services
  # ================================
  
  # PostgreSQL for persistent storage and vector embeddings
  postgres:
    image: pgvector/pgvector:pg16
    container_name: ontology-postgres
    environment:
      POSTGRES_DB: ontology_lsp
      POSTGRES_USER: ontology
      POSTGRES_PASSWORD: ontology_dev_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ontology -d ontology_lsp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ontology-network
    restart: unless-stopped

  # Redis/Valkey for caching and real-time features
  redis:
    image: valkey/valkey:8.0-alpine
    container_name: ontology-redis
    command: valkey-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/valkey.conf:/usr/local/etc/valkey/valkey.conf:ro
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - ontology-network
    restart: unless-stopped

  # ================================
  # Ontology-LSP Services
  # ================================
  
  # Main Ontology-LSP Application (All protocols in one container)
  ontology-lsp:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: ontology-lsp-main
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database Configuration
      DATABASE_URL: postgres://ontology:ontology_dev_password@postgres:5432/ontology_lsp
      DATABASE_PATH: /app/data/ontology.db
      
      # Cache Configuration  
      REDIS_URL: redis://redis:6379
      CACHE_TTL: 3600
      DISTRIBUTED_CACHE: "true"
      
      # Service Ports
      HTTP_API_PORT: 7000
      MCP_SSE_PORT: 7001
      LSP_SERVER_PORT: 7002
      
      # Performance & Learning
      PERFORMANCE_MONITORING: "true"
      PATTERN_LEARNING: "true"
      FUZZY_MATCHING: "true"
      
      # Production Settings
      NODE_ENV: development
      LOG_LEVEL: debug
      ONTOLOGY_WORKSPACE: /app/workspace
      
      # Security
      TRUST_PROXY: "true"
      CORS_ORIGINS: "http://localhost:3000,http://localhost:8080"
      
      # OpenTelemetry Tracing
      OTEL_ENABLED: "true"
      OTEL_SERVICE_NAME: ontology-lsp
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
      
    ports:
      - "7000:7000"  # HTTP API
      - "7001:7001"  # MCP SSE
      - "7002:7002"  # LSP TCP
    volumes:
      - ./test-workspace:/app/workspace:ro
      - ontology_data:/app/data
      - ontology_logs:/app/logs
      - ./config:/app/config:ro
    healthcheck:
      test: |
        curl -f http://localhost:7000/health && 
        curl -f http://localhost:7001/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ontology-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'

  # ================================
  # Observability Stack
  # ================================
  
  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.57
    container_name: ontology-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
      - "9411:9411"    # Zipkin
    networks:
      - ontology-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: ontology-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ontology-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:10.4.1
    container_name: ontology-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - ontology-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ================================
  # Development Tools
  # ================================
  
  # Web UI for development and testing
  web-ui:
    image: nginx:alpine
    container_name: ontology-web-ui
    ports:
      - "8080:80"
    volumes:
      - ./web-ui/dist:/usr/share/nginx/html:ro
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - ontology-lsp
    networks:
      - ontology-network
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ontology-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - ontology-network
    restart: unless-stopped

# ================================
# Network Configuration
# ================================
networks:
  ontology-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volume Configuration  
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ontology_data:
    driver: local
  ontology_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local